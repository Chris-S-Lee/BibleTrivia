<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <title>조작 화면</title>
  <link rel="stylesheet" href="/styles.css" />
  <script src="/socket.io/socket.io.js"></script>
  <style>
    table th:first-child,
    table td:first-child {
    visibility: hidden;
    }
  </style>
</head>
<body>
  <table>
  <colgroup>
    <col style="width: 0%;" />  <!-- Rank 숨김 -->
    <col style="width: 30%;" />  <!-- QTF 이름 -->
    <col style="width: 10%;" />  <!-- Q -->
    <col style="width: 10%"/>  <!-- T -->
    <col style="width: 10%"/>  <!-- F -->
    <col style="width: 40%"/>  <!-- F -->
  </colgroup>
    <thead>
      <tr>
        <th>Rank</th>
        <th>ALPHA</th>
        <th>Best ALPHA</th>
        <th>Best ACADEMIC</th>
        <th>Best CHALLENGING</th>
        <th>Control</th>
      </tr>
    </thead>
    <tbody id="scoreBody"></tbody>
  </table>

  <script>
  const socket = io();
  let teams = [];

  socket.on("scoreUpdated", (data) => {
    teams = data.teams;
    renderTable();
  });

  async function fetchInitial() {
    const res = await fetch("/api/teams");
    teams = await res.json();
    renderTable();
  }

  function renderTable() {
    // 항목별 최고 점수 계산
    const maxQ = Math.max(...teams.map(t => t.q));
    const maxT = Math.max(...teams.map(t => t.t));
    const maxF = Math.max(...teams.map(t => t.f));

    // q 점수 기준 순위 계산
    const sortedByAlpha = [...teams].sort((a, b) => b.q - a.q);
    let rankMap = {};
    let currentRank = 0;
    let prevQ = null;
    sortedByAlpha.forEach((team, index) => {
      if (team.q !== prevQ) {
        currentRank = index + 1;
        prevQ = team.q;
      }
      rankMap[team.name] = currentRank;
    });

    // 이름순 정렬로 행 고정
    const sortedByName = [...teams].sort((a, b) => a.name.localeCompare(b.name, "ko"));
    const tbody = document.getElementById("scoreBody");
    tbody.innerHTML = "";

    sortedByName.forEach((team) => {
      const rank = rankMap[team.name];

      // 최고 점수면서 0점이 아닐 때만 색상 적용
      const qClass = team.q === maxQ && maxQ > 0 ? "alpha-top" : "";
      const tClass = team.t === maxT && maxT > 0 ? "academic-top" : "";
      const fClass = team.f === maxF && maxF > 0 ? "challenging-top" : "";

      const row = document.createElement("tr");
      if (team.q === 0) {
        row.classList.add("default");
      } else if (rank === 1) {
        row.classList.add("gold");  // 기존 gold, silver, bronze 클래스는 필요 없으면 제거 가능
      } else if (rank === 2) {
        row.classList.add("silver");
      } else if (rank === 3) {
        row.classList.add("bronze");
      }

      row.innerHTML = `
        <td>${rank}</td>
        <td>${team.name}</td>
        <td class="${qClass}">${team.q}</td>
        <td class="${tClass}">${team.t}</td>
        <td class="${fClass}">${team.f}</td>
        <td>
          <div>
            <div>ALPHA:
              <button onclick="addScore('${team.name}', 'q', 1)">+1</button>
              <button onclick="addScore('${team.name}', 'q', -1)">-1</button>
            </div>
            <div>Academic:
              <button onclick="addScore('${team.name}', 't', 1)">+1</button>
              <button onclick="addScore('${team.name}', 't', -1)">-1</button>
            </div>
            <div>Challenging:
              <button onclick="addScore('${team.name}', 'f', 1)">+1</button>
              <button onclick="addScore('${team.name}', 'f', -1)">-1</button>
            </div>
          </div>
        </td>
      `;

      tbody.appendChild(row);
    });
  }

  async function addScore(name, field, points) {
    await fetch("/api/teams/add", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ name, field, points }),
    });
  }

  fetchInitial();
</script>

</body>
</html>
